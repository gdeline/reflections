Repositories store metadata in a hidden ".git" directory ((use ls -la to see))

Create repostiory ((can do offline))

$cd repository_source_dir
$ls -a ((see files)
$git init ((creates new repository, w/o any commits))

$git status ((shows status including most recent commit))


create snapshot via a staging area

$git status
$git add file1
$git add filen

$git config --global core.editor "notepad" ((set git editor))
$git config --global user.email "email@company.com"
$git config --global user.name "Name"

$git commit

$git commit -m "Commit message" ((commit message))
// Commit Message Styles: http://udacity.github.io/git-styleguide/

@todo: check email notifications - did not receive email message


$git checkout master
$git diff ((changes between working directory and staging area - what has been staged for a commit))
$git diff --staged ((deltas between staging area and repository - what is waiting to be committed))
$git diff id1 id2 ((deltas between commits))

$git reset --hard ((discards changes in working area and staging area - CANNOT RECOVER))

stopped at 12:49 2015/08/05 at start of Lesson 2 "Commit the Bug Fix" - Leave 'detachec HEAD' state

16:49

branches

- start with master branch
- "detached head" is when you are not on a branch

create, check out, commit branches
- 

$git branch ((info))
$git branch label ((create branch))
$git checkout label ((checkout branch))

"remote branch" - created by s/o else
 

$git log --graph --oneline branch1 branch

$git checkout -b new_branch_name ((create a new branch for "detached HEAD" branch commits))

merging branches
((merge X into Y))
$git branch Y ((go into the Y branch since that's the one you want to merge into))
$git merge X Y ((merge X into Y - N.B. if in branch Z then X & Y would be merged into Z))

$git merge --abort ((rollback the merge))

$git branch -d X ((delete branch no longer required))

$git config --global core.autocrlf true ((address Newline issues between Windows & Unix))

$git show commit_id ((show diff between commit and parent))

conflict detection
- if a conflict is detected the source file will have <<<<< and >>>>> embedded with branch name
- edit file manually and change/address the issue
$git status ((will show file as "both modified" under "unmerged paths"))
// check in the file
$git add file
$git status ((should show that conflicts are resolved but need to run a git commit))

$git log -n # ((only shows # of commits))



==============================================================================

Q: What happens when you initialize a repository? Why do you need to do it?-
A: metadata ".git" directory created.  need to do it to use repository

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: intermediate storage - buffer.  value is that you can add in multiple operations and then do a single atomic commit.  less error-prone than having to string together all of the files on one command line

Q: How can you use the staging area to make sure you have one commit per logical change?
A: multiple adds, then confirm everything is in place in staging, then finally do a single commit

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: feature dev, multiple people working on code base.  clear identification of what's being worked on, ability to merge together

Q: How do the diagrams help you visualize the branch structure?
A: Show visually where changes have been made, allow better planning for merges.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: the work done in a secondary branch is subsumed into the primary.  we represent it in the diagram in that manner as one branch ends where it merges into the other.

Q: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
A: auto merge (pro, con) : (ease, risk); manual merge (pro, con) : (specific, effort)



*** saved 2015/08/05 12:09
*** saved 2015/08/05 12:27working